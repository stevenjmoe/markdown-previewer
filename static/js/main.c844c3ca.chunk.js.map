{"version":3,"sources":["markdown-previewer.js","App.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","gfm","breaks","Renderer","link","href","title","text","concat","placeholder","MarkdownPreviewer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","handleChange","bind","assertThisInitialized","event","setState","target","value","react_default","a","createElement","lib","fluid","id","xs","md","onChange","dangerouslySetInnerHTML","__html","Component","App","className","Helmet","charSet","src_markdown_previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAIIA,EAASC,EAAQ,IACrBD,EAAOE,WAAW,CACdC,KAAK,EACLC,QAAQ,KAGK,IAAIJ,EAAOK,UAEnBC,KAAO,SAASC,EAAMC,EAAOC,GAClC,MAAO,4BAAAC,OAA4BH,EAA5B,MAAAG,OAAqCD,GAAS,QAIzD,IAAME,EAAc,ybAuDLC,cAvCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAUX,GAEdG,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALLA,4EAQNY,GACTT,KAAKU,SAAS,CACVL,SAAUI,EAAME,OAAOC,yCAK3B,OACIC,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMC,OAAK,GACPJ,EAAAC,EAAAC,cAAA,MAAIG,GAAG,SAAP,sBACAL,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKG,GAAI,GAAIC,GAAI,GACbP,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UACJL,EAAAC,EAAAC,cAAA,YAAUH,MAAOZ,KAAKI,MAAMC,SAAUgB,SAAUrB,KAAKM,iBAG7DO,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKG,GAAI,GAAIC,GAAI,GACbP,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,WACJL,EAAAC,EAAAC,cAAA,OAAKO,wBAA2B,CAACC,OAAQxC,EAAOiB,KAAKI,MAAMC,wBA7BvDmB,qBCVjBC,GAhBFzC,EAAQ,qLAGjB,OACE6B,EAAAC,EAAAC,cAAA,OAAKW,UAAU,iBACbb,EAAAC,EAAAC,cAACY,EAAA,OAAD,KACEd,EAAAC,EAAAC,cAAA,QAAMa,QAAQ,UACdf,EAAAC,EAAAC,cAAA,oCAGFF,EAAAC,EAAAC,cAACc,EAAD,cATUL,cCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c844c3ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './markdown-previewer.css';\r\nimport {Grid, Row, Col} from 'react-flexbox-grid'; \r\n\r\nlet marked = require(\"marked\");\r\nmarked.setOptions({\r\n    gfm: true,\r\n    breaks: true,\r\n});\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\nrenderer.link = function(href, title, text)  {\r\n    return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\r\n}\r\n\r\n//TODO -  list, blockquote, image, bolded text\r\nconst placeholder = \"# This is a heading\"\r\n                    + \"\\r## This is a subheading\"\r\n                    + \"\\r[This](www.google.com) is a link\"\r\n                    + \"\\r` here is some inline code` \"\r\n                    + \"\\r \\`\\`\\`\" \r\n                    + \"\\rand this is a block of multiline code\"\r\n                    + \"\\ranother line\"\r\n                    + \"\\ranother line \"\r\n                     + \"\\r\\`\\`\\`\"\r\n                    + \"\\r1. list item 1\"\r\n                    + \"\\r2. list item 2\"\r\n                    + \"\\r\\r>This is a blockquote!\"\r\n                    + \"\\rHere is a cat:  \\n![a cat picture](https://images.pexels.com/photos/104827/cat-pet-animal-domestic-104827.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=150)\"\r\n                    + \"\\r**and finally here is some bolded text**\"\r\n\r\nclass MarkdownPreviewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            markdown: placeholder\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            markdown: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid fluid>\r\n                <h1 id=\"title\">Markdown Previewer</h1>\r\n                <Row>\r\n                    <Col xs={12} md={6}>\r\n                        <h3>Input: </h3>\r\n                        <div id=\"editor\">\r\n                            <textarea value={this.state.markdown} onChange={this.handleChange} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={12} md={6} >\r\n                        <h3>Output: </h3>\r\n                        <div id=\"preview\">\r\n                            <div dangerouslySetInnerHTML = {{__html: marked(this.state.markdown)}}></div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Grid>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default MarkdownPreviewer;","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\nimport MarkdownPreviewer from './markdown-previewer';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nlet marked = require(\"marked\");\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App container\">\r\n        <Helmet>\r\n          <meta charSet=\"utf-8\" />\r\n          <title>Markdown Previewer</title>\r\n\r\n        </Helmet>\r\n        <MarkdownPreviewer />       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}